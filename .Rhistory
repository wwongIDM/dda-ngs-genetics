uniq_pairwise <- data.frame(t(combn(names(var_barcodes),2)))
names(uniq_pairwise) <- c("worm1", "worm2")
sim_scores <- unlist(lapply(seq(1, length(names(var_barcodes))), function(i){
string_diff(unlist(var_barcodes[uniq_pairwise[i, 1]]), unlist(var_barcodes[uniq_pairwise[i, 2]]))
}))
return(cbind(uniq_pairwise, value=sim_scores))
}
sim_all <- rbind.data.frame(
sim_scores(dplyr::filter(var_comb, unique_bases != 1)) %>% dplyr::mutate(region="All"),
sim_scores(dplyr::filter(var_comb, bc_region=="True", unique_bases != 1)) %>% dplyr::mutate(region="True"),
sim_scores(dplyr::filter(var_comb, bc_region=="False", unique_bases != 1)) %>% dplyr::mutate(region="False"))
ks.test(dplyr::filter(sim_all, region == "True") %>% .[["value"]],
dplyr::filter(sim_all, region == "False") %>% .[["value"]])
dplyr::filter(var_comb, unique_bases != 1) %>% head()
dplyr::filter(var_comb, unique_bases != 1) %>% dim()
var_pos <- vcf_merge_df %>%
dplyr::mutate(bc_region = ifelse(POS %in% seq(3788, 4534) | POS %in% seq(2628, 3345) | POS %in% seq(12562, 14566), "True", "False"),
POS = as.numeric(POS)) %>%
dplyr::filter(!POS %in% het_sites) %>%
dplyr::filter_at(vars(ends_with("_DP")), all_vars(. > 10)) %>%
dplyr::select(CHROM, POS, bc_region, ends_with("_GT"))
# count the number of bases at each position
var_comb <- cbind(var_pos[,c(1:3)], gt_count(var_pos[,-c(1:3)]))
write.table(var_comb, paste(gw_dir, "20200515_bcftools_counts.txt", sep="/"), sep="\t", quote = F, row.names = F)
sim_scores <- function(pos_df){
df_t <- tidyr::unite(data.frame(t(pos_df[,c(4:20)])), barcode, seq(1, nrow(pos_df)), sep="")
var_barcodes <- as.list(df_t[,1])
names(var_barcodes) <- row.names(df_t)
uniq_pairwise <- data.frame(t(combn(names(var_barcodes),2)))
names(uniq_pairwise) <- c("worm1", "worm2")
sim_scores <- unlist(lapply(seq(1, length(names(var_barcodes))), function(i){
string_diff(unlist(var_barcodes[uniq_pairwise[i, 1]]), unlist(var_barcodes[uniq_pairwise[i, 2]]))
}))
return(cbind(uniq_pairwise, value=sim_scores))
}
sim_all <- rbind.data.frame(
sim_scores(dplyr::filter(var_comb, unique_bases != 1)) %>% dplyr::mutate(region="All"),
sim_scores(dplyr::filter(var_comb, bc_region=="True", unique_bases != 1)) %>% dplyr::mutate(region="True"),
sim_scores(dplyr::filter(var_comb, bc_region=="False", unique_bases != 1)) %>% dplyr::mutate(region="False"))
ks.test(dplyr::filter(sim_all, region == "True") %>% .[["value"]],
dplyr::filter(sim_all, region == "False") %>% .[["value"]])
sim_all
sim_singEx <- rbind.data.frame(
sim_scores(dplyr::filter(var_comb, singleton_bases > 1)) %>% dplyr::mutate(region="All"),
sim_scores(dplyr::filter(var_comb, bc_region=="True", singleton_bases > 1)) %>% dplyr::mutate(region="True"),
sim_scores(dplyr::filter(var_comb, bc_region=="False", singleton_bases > 1)) %>% dplyr::mutate(region="False"))
pairwise_plots <- function(sim_df){
ggplot(sim_df, aes(x=value, group=region, fill=region)) +
geom_histogram(aes(y = ..density..), bins=20, alpha=0.2, position="identity") +
geom_density(alpha=0.5) +
scale_fill_manual(values = c("pink", "black", "red"),
labels = c(paste0("All variants\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'All')]), ")"),
paste0("Outside of loci\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'False')]), ")"),
paste0("Within loci\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'True')]), ")")),
name = "") +
labs(x="Pairwise genetic similarity", y="Comparisons") +
theme(legend.position = "top") +
xlim(c(0,1))
}
ggsave("20200515_seqStrategy_bcftoolsVariantCheck2.png", plot = pairwise_plots(sim_all), path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
ggsave("20200515_seqStrategy_bcftoolsVariantCheck_singEx2.png", plot = pairwise_plots(sim_singEx), path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
ks.test(dplyr::filter(sim_all, region == "True") %>% .[["value"]],
dplyr::filter(sim_all, region == "False") %>% .[["value"]])
unique(sim_singEx$bc_length[which(sim_singEx$region == 'All')])
sim_singEx$bc_length[which(sim_singEx$region == 'All')]
sim_scores <- function(pos_df){
df_t <- tidyr::unite(data.frame(t(pos_df[,c(4:20)])), barcode, seq(1, nrow(pos_df)), sep="")
var_barcodes <- as.list(df_t[,1])
names(var_barcodes) <- row.names(df_t)
uniq_pairwise <- data.frame(t(combn(names(var_barcodes),2)))
names(uniq_pairwise) <- c("worm1", "worm2")
sim_scores <- unlist(lapply(seq(1, length(names(var_barcodes))), function(i){
string_diff(unlist(var_barcodes[uniq_pairwise[i, 1]]), unlist(var_barcodes[uniq_pairwise[i, 2]]))
}))
return(cbind(uniq_pairwise, value=sim_scores, bc_length=nchar(var_barcodes[1])))
}
sim_all <- rbind.data.frame(
sim_scores(dplyr::filter(var_comb, unique_bases != 1)) %>% dplyr::mutate(region="All"),
sim_scores(dplyr::filter(var_comb, bc_region=="True", unique_bases != 1)) %>% dplyr::mutate(region="True"),
sim_scores(dplyr::filter(var_comb, bc_region=="False", unique_bases != 1)) %>% dplyr::mutate(region="False"))
ks.test(dplyr::filter(sim_all, region == "True") %>% .[["value"]],
dplyr::filter(sim_all, region == "False") %>% .[["value"]])
sim_singEx <- rbind.data.frame(
sim_scores(dplyr::filter(var_comb, singleton_bases > 1)) %>% dplyr::mutate(region="All"),
sim_scores(dplyr::filter(var_comb, bc_region=="True", singleton_bases > 1)) %>% dplyr::mutate(region="True"),
sim_scores(dplyr::filter(var_comb, bc_region=="False", singleton_bases > 1)) %>% dplyr::mutate(region="False"))
heaD(sim_all)
head(sim_all)
tail(sim_all)
unique(sim_all$bc_length[which(sim_all$region == 'All')]
)
pairwise_plots <- function(sim_df){
ggplot(sim_df, aes(x=value, group=region, fill=region)) +
geom_histogram(aes(y = ..density..), bins=20, alpha=0.2, position="identity") +
geom_density(alpha=0.5) +
scale_fill_manual(values = c("pink", "black", "red"),
labels = c(paste0("All variants\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'All')]), ")"),
paste0("Outside of loci\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'False')]), ")"),
paste0("Within loci\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'True')]), ")")),
name = "") +
labs(x="Pairwise genetic similarity", y="Comparisons") +
theme(legend.position = "top") +
xlim(c(0,1))
}
ggsave("20200515_seqStrategy_bcftoolsVariantCheck2.png", plot = pairwise_plots(sim_all), path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
ggsave("20200515_seqStrategy_bcftoolsVariantCheck_singEx2.png", plot = pairwise_plots(sim_singEx), path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
# plotting
pairwise_plots <- function(sim_df){
ggplot(sim_df, aes(x=value, group=region, fill=region)) +
geom_histogram(aes(y = ..density..), bins=20, alpha=0.2, position="identity") +
geom_density(alpha=0.5) +
scale_fill_manual(values = c("pink", "black", "red"),
labels = c(paste0("All variants\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'All')]), ")"),
paste0("Outside of loci\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'False')]), ")"),
paste0("Within loci\n(n=", unique(sim_df$bc_length[which(sim_df$region == 'True')]), ")")),
name = "") +
labs(x="Pairwise genetic similarity", y="Comparisons") +
theme(legend.position = "top") +
xlim(c(0,1))
}
ggsave("20200515_seqStrategy_bcftoolsVariantCheck.png", plot = pairwise_plots(sim_all), path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
ggsave("20200515_seqStrategy_bcftoolsVariantCheck_singEx.png", plot = pairwise_plots(sim_singEx), path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
gatk_variants <- dplyr::filter(gatk_missingRm, unique_bases > 1) %>%
dplyr::select(CHROM, POS, REF, ALT, A, C, G, T)
bcftools_variants <- dplyr::filter(var_comb, unique_bases > 1) %>%
dplyr::select(CHROM, POS, A, C, G, T)
pipeline_variants <- dplyr::full_join(gatk_variants, bcftools_variants, by=c("CHROM", "POS"))
pipeline_variants$shared_genotypes <- unlist(lapply(seq(1, nrow(pipeline_variants)), function(j){
all(pipeline_variants[j,5:8] == pipeline_variants[j,9:12])
}))
write.table(pipeline_variants, paste(gw_dir, "variantCaller_counts.txt", sep="/"), sep="\t", quote =  F, row.names = F)
pipeline_positions <- dplyr::filter(pipeline_variants, shared_genotypes == "TRUE") %>% .[["POS"]]
gatk_shared <-dplyr::filter(mt_gatk, POS %in% pipeline_positions)
gatk_simShared <- rbind.data.frame(
sim_df(gatk_shared) %>% dplyr::mutate(region="All loci"),
sim_df(dplyr::filter(gatk_shared, bc_region == "True")) %>% dplyr::mutate(region="Within loci"),
sim_df(dplyr::filter(gatk_shared, bc_region == "False")) %>% dplyr::mutate(region="Outside loci")
)
gatk_countT <- table(gatk_shared$bc_region)[['True']]
gatk_countF <- table(gatk_shared$bc_region)[['False']]
shared_dist <- pairwise_plots(gatk_simShared, gatk_countT, gatk_countF)
ggsave("20200515_seqStrategy_sharedVar.png", plot = shared_dist, path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
gatk_shared
gatk_shared <-dplyr::filter(mt_gatk, POS %in% pipeline_positions)%>%
dplyr::mutate(bc_region = ifelse(POS %in% seq(3788, 4534) | POS %in% seq(2628, 3345) | POS %in% seq(12562, 14566), "True", "False"))
gatk_simShared <- rbind.data.frame(
sim_df(gatk_shared) %>% dplyr::mutate(region="All loci"),
sim_df(dplyr::filter(gatk_shared, bc_region == "True")) %>% dplyr::mutate(region="Within loci"),
sim_df(dplyr::filter(gatk_shared, bc_region == "False")) %>% dplyr::mutate(region="Outside loci")
)
gatk_countT <- table(gatk_shared$bc_region)[['True']]
gatk_countF <- table(gatk_shared$bc_region)[['False']]
shared_dist <- pairwise_plots(gatk_simShared, gatk_countT, gatk_countF)
ggsave("20200515_seqStrategy_sharedVar.png", plot = shared_dist, path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
head(gatk_shared)
table(gatk_shared$bc_region)[['True']]
table(gatk_shared$bc_region)[['False']]
shared_dist <- pairwise_plots(gatk_simShared, gatk_countT, gatk_countF)
pairwise_plots <- function(sim_df, within_count, outside_count){
ggplot(sim_df, aes(x=value, group=region, fill=region)) +
geom_histogram(aes(y = ..density..), bins=20, alpha=0.2, position="identity") +
geom_density(alpha=0.5) +
scale_fill_manual(values = c("pink", "black", "red"),
labels = c(paste0("All variants\n(n=", outside_count + within_count, ")"),
paste0("Outside loci\n(n=", outside_count, ")"),
paste0("Within loci\n(n=", within_count, ")")),
name = "") +
labs(x="Pairwise genetic similarity", y="Comparisons") +
theme(legend.position = "top") +
xlim(c(0,1))
}
shared_dist <- pairwise_plots(gatk_simShared, gatk_countT, gatk_countF)
ggsave("20200515_seqStrategy_sharedVar.png", plot = shared_dist, path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
gatk_variants <- dplyr::filter(gatk_missingRm, unique_bases > 1) %>%
dplyr::select(CHROM, POS, REF, ALT, A, C, G, T)
bcftools_variants <- dplyr::filter(var_comb, unique_bases > 1) %>%
dplyr::select(CHROM, POS, A, C, G, T)
pipeline_variants <- dplyr::full_join(gatk_variants, bcftools_variants, by=c("CHROM", "POS"))
pipeline_variants$shared_genotypes <- unlist(lapply(seq(1, nrow(pipeline_variants)), function(j){
all(pipeline_variants[j,5:8] == pipeline_variants[j,9:12])
}))
write.table(pipeline_variants, paste(gw_dir, "variantCaller_counts.txt", sep="/"), sep="\t", quote =  F, row.names = F)
pipeline_positions <- dplyr::filter(pipeline_variants, shared_genotypes == "TRUE") %>% .[["POS"]]
gatk_shared <-dplyr::filter(mt_gatk, POS %in% pipeline_positions)
gatk_simShared <- rbind.data.frame(
sim_df(gatk_shared) %>% dplyr::mutate(region="All loci"),
sim_df(dplyr::filter(gatk_shared, bc_region == "True")) %>% dplyr::mutate(region="Within loci"),
sim_df(dplyr::filter(gatk_shared, bc_region == "False")) %>% dplyr::mutate(region="Outside loci")
)
gatk_countT <- table(gatk_shared$bc_region)[['True']]
gatk_countF <- table(gatk_shared$bc_region)[['False']]
shared_dist <- pairwise_plots(gatk_simShared, gatk_countT, gatk_countF)
ggsave("20200515_seqStrategy_sharedVar.png", plot = shared_dist, path = gw_dir, width = 5.5, height = 4, units = c("in"), dpi = 300)
heaD(merged_metaFilt)
head(merged_metaFilt)
host_count <- dplyr::group_by(merged_metaFilt, year, host_number) %>%
dplyr::summarise(host_count = n()) %>%
dplyr::filter(host_count > 1) %>%
dplyr::left_join(., merged_metaFilt) %>%
dplyr::left_join(., barcode_tmp) %>%
dplyr::mutate(barcode = ifelse(barcode_number > 9 | is.na(barcode_number), "Not common", barcode_number))
host_ord <- names(sort(table(host_count$host_number), decreasing = F))
host_bc_count <- host_count %>%
dplyr::mutate(host_number = factor(host_number, levels = host_ord)) %>%
ggplot(aes(x= host_number)) +
geom_bar(aes(fill=barcode)) +
scale_fill_manual(values=c(bc_colors[-10], "golden rod"), name="Barcode identifier") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
legend.position = c(0.28,0.95),
legend.box = "horizontal",
panel.grid.major = element_blank()) +
labs(x="Host", y="Worms per host") +
guides(fill=guide_legend(ncol=5))
host_bc_count
ggsave("20200515_genSim_hostBarcode.png", plot = host_bc_count, path = paste(project_dir, "plots", sep="/"), width = 7.25, height = 3, units = c("in"), dpi = 300)
head(barcode_tmp)
merge <-ggpubr::ggarrange(host_bc_count, host_gen_sim, ncol=1, labels=c("A", "B"))
ggsave("20200515_genSim_mergedHistogram.png", plot = merge, path = paste(project_dir, "plots", sep="/"), width = 7.25, height = 5, units = c("in"), dpi = 300)
dist_perm <- data.table(do.call(rbind, lapply(seq(1,100), function(i){
tmp_corr <- dplyr::select(gw_compFilt, worm1, worm2, bc_match, dist_m)
tmp_corr$dist_perm <- sample(tmp_corr$dist_m)
tmp_corr$perm <- i
return(tmp_corr)
})))
perm_plot <- ggpubr::ggarrange(
ggplot(dist_perm, aes(x=dist_perm/1000, group=paste(bc_match, perm))) +
stat_ecdf(aes(colour = bc_match), size=1, alpha=0.25) +
labs(x="Distance (km)", y="Cumulative density") +
scale_color_manual(values=tf_colors, name="Same\nbarcode"),
ggplot(dist_perm, aes(x=dist_perm/1000, group=paste(bc_match, perm))) +
stat_density(aes(fill = bc_match), position = "identity", alpha=0.25) +
scale_fill_manual(values=tf_colors, name="Same\nbarcode") +
labs(x="Distance (km)", y="Probability density"),
common.legend=TRUE, legend = "top")
ggsave("20200515_sensitivity_densityDistPerm.png", plot = perm_plot, path = paste(project_dir, "plots", sep="/"), width = 6, height = 3, units = c("in"), dpi = 300)
# load libraries
for(p in c('data.table', 'dplyr', 'tidyr', "ggplot2", "wesanderson")){
if(!p %in% installed.packages()[,1]){
install.packages(p)
library(p, character.only = TRUE)
}
library(p, character.only = TRUE)
}
# set global options
options(datatable.fread.datatable=FALSE)
options(stringsAsFactors = FALSE)
# set directories
project_dir <- "/home/jribado/Dropbox (IDM)/Data, Dynamics, and Analytics Folder/Projects/malaria_pfcommunity/senegal_barcodeWGS_comp"
# function to spit out different positions
string_diff <- function(a, b){
if(nchar(a)!=nchar(b)) stop("Lengths of input strings differ. Please check your input.")
seq.a <- unlist(strsplit(a,split=""))
seq.b <- unlist(strsplit(b,split=""))
diff.d <- rbind(seq.a,seq.b)
only.diff <-diff.d[,diff.d[1,]!=diff.d[2,]]
pos <- which(diff.d[1,]!=diff.d[2,])
if(0 < length(pos) & length(pos) <= 3){
return(cbind(full_barcode.x=a, full_barcode.y=b, diff_pos=toString(pos)))
}else{
return(cbind(full_barcode.x=a, full_barcode.y=b, diff_pos=">3"))
}
}
# load data
barcode_pos <- read.delim('/home/jribado/Dropbox (IDM)/parasite_genetics/genomics/senegal/2008Daniels_BarcodePositions_Updated.txt')
barcode_vector <- paste(barcode_pos$chr, barcode_pos$position, sep=":")
barcode_gt  <- read.delim('/home/jribado/Dropbox (IDM)/Data, Dynamics, and Analytics Folder/Projects/malaria_barcode/python_barcode_package/data/Senegal_AllBarcodes_2019.04.01.csv', sep=",")[,1:28]
names(barcode_gt) <- c("sample", "year", barcode_vector, "X", "N")
wgs_zarr_gt  <- read.delim('/home/jribado/Dropbox (IDM)/parasite_genetics/genomics/senegal/Pf3k_wgsSenegalHaploidGenotype24bc.txt', sep=",")
wgs_gt <- data.frame(t(wgs_zarr_gt[,-1])) %>%
tibble::rownames_to_column("sample") %>%
dplyr::mutate(sample = gsub("SenT", "SEN_TH_", sample),
sample = gsub("\\.", ".20", sample))
names(wgs_gt) <- c("sample", wgs_zarr_gt$X)
# identify the missing position in wgs data
missing_position <- names(wgs_gt)[! barcode_vector %in% names(wgs_gt)]
barcode_gt <- barcode_gt[, !names(barcode_gt) %in% missing_position]
barcode_gt <- tidyr::unite(barcode_gt, barcode, barcode_vector[1]:barcode_vector[24], sep="", remove=F)
head(barcode_gt)
head(wgs_gt)
wgs_gt <- data.frame(t(wgs_zarr_gt[,-1])) %>%
tibble::rownames_to_column("sample") %>%
dplyr::mutate(sample = gsub("SenT", "SEN_TH_", sample),
sample = gsub("\\.", ".20", sample)) %>%
tidyr::unite(barcode, barcode_vector[1]:barcode_vector[24], sep="", remove=F)
wgs_gt <- data.frame(t(wgs_zarr_gt[,-1])) %>%
tibble::rownames_to_column("sample") %>%
dplyr::mutate(sample = gsub("SenT", "SEN_TH_", sample),
sample = gsub("\\.", ".20", sample)) %>%
names(wgs_gt) <- c("sample", wgs_zarr_gt$X)
wgs_gt <- data.frame(t(wgs_zarr_gt[,-1])) %>%
tibble::rownames_to_column("sample") %>%
dplyr::mutate(sample = gsub("SenT", "SEN_TH_", sample),
sample = gsub("\\.", ".20", sample))
names(wgs_gt) <- c("sample", wgs_zarr_gt$X)
wgs_gt <- tidyr::unite(wgs_gt, barcode, barcode_vector[1]:barcode_vector[24], sep="", remove=F)
# identify the missing position in wgs data
missing_position <- names(wgs_gt)[! barcode_vector %in% names(wgs_gt)]
head(wgs_gt)
overlap_gt <- dplyr::left_join(wgs_gt, barcode_gt, by=c("sample"))
head(overlap_gt )
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
head(overlap_gt)
View(overlap_gt)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- rbind_list(lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt[i, "barcode.x"], overlap_gt[i, "barcode.y"])
}))
i=1
overlap_gt[i, c("barcode.x")]
overlap_gt[i, c("barcode.y")]
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- rbind_list(lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt[i, c("barcode.x")], overlap_gt[i, c("barcode.y")])
}))
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- bind_rows(lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt[i, c("barcode.x")], overlap_gt[i, c("barcode.y")])
}))
pairwise_diff
seq(1, nrow(overlap_gt))
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- bind_rows(lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
string_diff <- function(a, b){
if(nchar(a)!=nchar(b)) stop("Lengths of input strings differ. Please check your input.")
seq.a <- unlist(strsplit(a,split=""))
seq.b <- unlist(strsplit(b,split=""))
diff.d <- rbind(seq.a,seq.b)
only.diff <-diff.d[,diff.d[1,]!=diff.d[2,]]
pos <- which(diff.d[1,]!=diff.d[2,])
if(0 < length(pos) & length(pos) <= 3){
return(cbind(full_barcode.x=a, full_barcode.y=b, diff_pos=toString(pos)))
}else{
return(cbind(full_barcode.x=a, full_barcode.y=b, diff_pos=">3"))
}
}
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- bind_rows(lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$`barcode.x`[i], overlap_gt`$barcode.y`[i])
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- bind_rows(lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
})
pairwise_diff
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
heaD(pairwise_diff)
head(pairwise_diff)
View(pairwise_diff)
string_diff <- function(a, b){
if(nchar(a)!=nchar(b)) stop("Lengths of input strings differ. Please check your input.")
seq.a <- unlist(strsplit(a,split=""))
seq.b <- unlist(strsplit(b,split=""))
diff.d <- rbind(seq.a,seq.b)
only.diff <-diff.d[,diff.d[1,]!=diff.d[2,]]
pos <- which(diff.d[1,]!=diff.d[2,])
return(cbind(full_barcode.x=a, full_barcode.y=b, diff_pos=toString(pos)))
}
}
string_diff <- function(a, b){
if(nchar(a)!=nchar(b)) stop("Lengths of input strings differ. Please check your input.")
seq.a <- unlist(strsplit(a,split=""))
seq.b <- unlist(strsplit(b,split=""))
diff.d <- rbind(seq.a,seq.b)
only.diff <-diff.d[,diff.d[1,]!=diff.d[2,]]
pos <- which(diff.d[1,]!=diff.d[2,])
return(cbind(barcode.x=a, barcode.y=b, diff_pos=toString(pos)))
}
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
pairwise_diff
stringr::str_count("TACTGCAGATGTACCCAAAAXTG", "X")
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, pairwise_diff) %>%
dplyr::mutate(taq_x =  stringr::str_count(barcode.x, "X"),
taq_n =  stringr::str_count(barcode.x, "N"),
wgs_x =  stringr::str_count(barcode.y, "X"),
whs_n =  stringr::str_count(barcode.y, "N"))
overlap_diff <- dplyr::full_join(overlap_gt, pairwise_diff)
class(pairwise_diff)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, data.frame(pairwise_diff)) %>%
dplyr::mutate(taq_x =  stringr::str_count(barcode.x, "X"),
taq_n =  stringr::str_count(barcode.x, "N"),
wgs_x =  stringr::str_count(barcode.y, "X"),
whs_n =  stringr::str_count(barcode.y, "N"))
head(overlap_diff)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, data.frame(pairwise_diff)) %>%
dplyr::mutate(wgs_x =  stringr::str_count(barcode.x, "X"),
wgs_n =  stringr::str_count(barcode.x, "N"),
taq_x =  stringr::str_count(barcode.y, "X"),
taq_n =  stringr::str_count(barcode.y, "N"))
head(overlap_diff)
View(overlap_diff)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, data.frame(pairwise_diff)) %>%
dplyr::mutate(wgs_x =  stringr::str_count(barcode.x, "X"),
wgs_n =  stringr::str_count(barcode.x, "N"),
taq_x =  stringr::str_count(barcode.y, "X"),
taq_n =  stringr::str_count(barcode.y, "N"),
diff_pos = stringr::str_count(barcode.y, ",") + 1)
head(overlap_diff)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, data.frame(pairwise_diff)) %>%
dplyr::mutate(wgs_x =  stringr::str_count(barcode.x, "X"),
wgs_n =  stringr::str_count(barcode.x, "N"),
taq_x =  stringr::str_count(barcode.y, "X"),
taq_n =  stringr::str_count(barcode.y, "N"),
pos_counts = stringr::str_count(barcode.y, ",") + 1)
heaD(overlap_diff)
head(overlap_diff)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, data.frame(pairwise_diff)) %>%
dplyr::mutate(wgs_x =  stringr::str_count(barcode.x, "X"),
wgs_n =  stringr::str_count(barcode.x, "N"),
taq_x =  stringr::str_count(barcode.y, "X"),
taq_n =  stringr::str_count(barcode.y, "N"),
pos_counts = ifelse(stringr::str_count(barcode.y, "\\,") > 0,  stringr::str_count(barcode.y, "\\,") + 1, 0))
heaD(overlap_diff)
head(overlap_diff)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, data.frame(pairwise_diff)) %>%
dplyr::mutate(wgs_x =  stringr::str_count(barcode.x, "X"),
wgs_n =  stringr::str_count(barcode.x, "N"),
taq_x =  stringr::str_count(barcode.y, "X"),
taq_n =  stringr::str_count(barcode.y, "N"),
pos_counts = ifelse(stringr::str_count(diff_pos, "\\,") > 0,  stringr::str_count(barcode.y, "\\,") + 1, 0))
head(overlap_diff)
View(overlap_diff)
tail(overlap_diff)
overlap_gt <- dplyr::inner_join(dplyr::select(wgs_gt, sample, barcode), dplyr::select(barcode_gt, sample, barcode), by=c("sample"))
pairwise_diff <- do.call("rbind", lapply(seq(1, nrow(overlap_gt)), function(i){
string_diff(overlap_gt$barcode.x[i], overlap_gt$barcode.y[i])
}))
overlap_diff <- dplyr::full_join(overlap_gt, data.frame(pairwise_diff)) %>%
dplyr::mutate(wgs_x =  stringr::str_count(barcode.x, "X"),
wgs_n =  stringr::str_count(barcode.x, "N"),
taq_x =  stringr::str_count(barcode.y, "X"),
taq_n =  stringr::str_count(barcode.y, "N"),
pos_counts = ifelse(diff_pos == "",  0, stringr::str_count(diff_pos, "\\,") + 1))
heaD(overlap_diff)
head(overlap_diff)
View(overlap_diff)
ggplot(aes(x=pos_counts)) + geom_histogram()
ggplot(overlap_diff, aes(x=pos_counts)) + geom_histogram()
gt_diff_dist <- ggplot(overlap_diff, aes(x=pos_counts)) +
geom_histogram() +
labs(x="Mismatching positions", y="Samples")
ggsave("202005_pf3kVCFgt_mismatchHist.png", plot = gt_diff_dist, path = paste(project_dir, "plots", sep="/"), width = 7.25, height = 3, units = c("in"), dpi = 300)
gt_diff_dist <- ggplot(overlap_diff, aes(x=pos_counts)) +
geom_histogram() +
labs(x="Mismatching positions", y="Samples")
ggsave("202005_pf3kVCFgt_mismatchHist.png", plot = gt_diff_dist, path = paste(project_dir, "plots", sep="/"), width = 5, height = 3, units = c("in"), dpi = 300)
gt_diff_dist <- ggplot(overlap_diff, aes(x=pos_counts)) +
geom_histogram() +
labs(x="Mismatching positions (max n = 23)", y="Samples (n=109")
ggsave("202005_pf3kVCFgt_mismatchHist.png", plot = gt_diff_dist, path = paste(project_dir, "plots", sep="/"), width = 5, height = 3, units = c("in"), dpi = 300)
gt_diff_dist <- ggplot(overlap_diff, aes(x=pos_counts)) +
geom_histogram() +
labs(x="Mismatching positions (max n = 23)", y="Samples (n=109)")
ggsave("202005_pf3kVCFgt_mismatchHist.png", plot = gt_diff_dist, path = paste(project_dir, "plots", sep="/"), width = 5, height = 3, units = c("in"), dpi = 300)
?pivot_longer
head(overlap_diff)
head(overlap_diff)
View(overlap_diff)
overlap_diff_long <- tidyr::pivot_longer(overlap_diff, wgs_x:taq_n, names_to = c("tech"), values_to = c("sample_count"))
head(overlap_diff_long)
overlap_diff_long <- tidyr::pivot_longer(overlap_diff, wgs_x:taq_n, names_to = c("tech"), values_to = c("sample_count")) %>%
tidyr::separate(tech, c("technology", "variant"))
head(overlap_diff_long)
overlap_diff_long <- tidyr::pivot_longer(overlap_diff, wgs_x:taq_n, names_to = c("tech"), values_to = c("sample_count")) %>%
tidyr::separate(tech, c("technology", "variant"))
overlap_diff_long %>% ggplot(aes(x=technology, y=sample_count, group=sample)) +
geom_point() + geom_line() +
facet_grid(~technology)
overlap_diff_long %>% ggplot(aes(x=technology, y=sample_count, group=sample)) +
geom_point() + geom_line() +
facet_grid(~technology)
overlap_diff_long %>% ggplot(aes(x=technology, y=sample_count, group=sample)) +
geom_point()
